model:
  arch: "DeepLabX" # DeepLabX, DeepLab, UNetResnet, UNet
  out_layer_size: 256
  in_channels: 3
  backbone: "resnet50" # resnet18, resnet34, resnet50, resnet101
  output_stride: 16
  freeze_bn: False
  freeze_backbone: False
  version: "example"

data:
  folder_structure: "separate_json" # separate, separate_json, unified
  dataset: "coco"
  input_size: 240
  nb_classes: 81

  crop_image:
      status: 0
      x_min: 0
      y_min: 0
      x_max: 0
      y_max: 0
      
  augmentations:
  
    ShiftScaleRotate:
      shift_limit: 0.2
      scale_limit: 0.2
      rotate_limit: 30
      probability: 0.3

    RGBShift:
      r_shift_limit: 20
      g_shift_limit: 20
      b_shift_limit: 20
      probability: 0.2

    RandomBrightnessContrast:
      brightness_limit: 0.2
      contrast_limit: 0.1
      probability: 0.2

training:
  optimizer: "Lion"
  load_opt: False
  criterion: 'ProxyAnchor' # CrossEntropyLoss2d | DiceLoss | FocalLoss | CrossEntropyDiceLoss | BinaryCrossEntropyWithLogits2d
  epochs: 200
  batch_size: 4
  learning_rate: 0.00001
  device: "cuda"
  num_workers: 4

proxy_anchor:
  alpha: 32
  margin: 0.8
  lr: 0.1
  steps: 3000

inference:
  device: "cuda"
  support_image: "./inference_data/support/emblem_test_q_1.jpg"
  support_annotation: "./inference_data/support/emblem_test_q_1.json"
  query_image: "./inference_data/query/emblem_1.jpg"
  num_of_neighbors: 4

#-- Guidance for models' configuration --#
#  model = UNet(
#      num_classes=cfg.model.num_classes,
#      in_channels=3,
#      freeze_bn=cfg.model.freeze_bn
#  )

#  model = UNetResnet(
#      num_classes=cfg.model.num_classes,
#      in_channels=3,
#      backbone=cfg.model.backbone,
#      pretrained=True,
#      freeze_bn=cfg.model.freeze_bn,
#      freeze_backbone=cfg.model.freeze_backbone
#  )

#  model = DeepLab(
#      num_classes=cfg.model.num_classes,
#      in_channels=3,
#      backbone=cfg.model.backbone,
#      pretrained=True,
#      output_stride=cfg.model.output_stride,
#      freeze_bn=cfg.model.freeze_bn,
#      freeze_backbone=cfg.model.freeze_backbone
#  )

#  model = DeepLabX(
#      num_classes=cfg.model.num_classes,
#      in_channels=3,
#      backbone=cfg.model.backbone,
#      pretrained=True,
#      output_stride=cfg.model.output_stride,
#      freeze_bn=cfg.model.freeze_bn,
#      freeze_backbone=cfg.model.freeze_backbone
#  )


